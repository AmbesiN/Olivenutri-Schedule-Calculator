import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from datetime import datetime, timedelta

class InstructionalMethodCalculator:
    def __init__(self, root):
        self.root = root
        self.root.title("PGCC Credit Hour and Schedule Calculator")

        # Instructional methods and their corresponding values [direct_instruction, out_of_class]
        self.instructional_methods = {
            "Lecture (ratio 2:1)": [12.5, 25],
            "Lab (Standard ratio: 2:1)": [25, 12.5],
            "Lab (ratio 3:1)": [37.5, 12.5],
            "Studio (ratio 2:1)": [25, 12.5],
            "Clinical (ratio 3:0)*": [37.5, 0],
            "Clinical (ratio 4:0)*": [50, 0],
            "Practicum/Externship (ratio 3:0)": [37.5, 0],
            "Fieldwork (ratio 3:0)": [37.5, 0],
            "Internship ratio (3:0)": [0.67, 50],
            "Private Lesson (ratio 1:1)": [12.5, 12.5],
            "Recitation (ratio 1:2)": [12.5, 25],
        }

        # Variables to store user inputs
        self.method_credits = {method: tk.DoubleVar(value=0) for method in self.instructional_methods}
        self.duration_options = ["4 weeks", "5 weeks", "7 weeks", "10 weeks", "12 weeks", "15 weeks"]
        self.selected_duration = tk.StringVar(value=self.duration_options[0])
        self.meetings_per_week_options = [1, 2, 3, 4, 5, 6]
        self.selected_meetings_per_week = tk.IntVar(value=self.meetings_per_week_options[0])

        # Counter for consecutive reset button presses
        self.reset_button_count = 0

        # Initialize the GUI
        self.create_widgets()

    def create_widgets(self):
        # Label indicating the creators of the program
        made_by_label = tk.Label(self.root, text="Made by Tech Innovators: Cristian Morejon, Deiron Peter-Thomas, Michael Smith, Celeste Harding, Susana Chavez", font=("Helvetica", 8, "bold"))
        made_by_label.pack(pady=5)

        # Title label
        title_label = tk.Label(self.root, text="Enter the number of credits per instructional type as listed on the master course syllabus: ", font=("Helvetica", 12, "bold"))
        title_label.pack(pady=5)

        # Frame for method checkboxes and credit input boxes
        method_frame = tk.Frame(self.root)
        method_frame.pack(pady=5)

        # Calculate the number of rows and columns needed for the method display
        num_methods = len(self.instructional_methods)
        num_columns = 2
        rows = (num_methods + num_columns - 1) // num_columns

        # Create labels and entry boxes for each method
        for i, (method, _) in enumerate(self.instructional_methods.items()):
            row = i % rows
            col = i // rows

            method_label = tk.Label(method_frame, text=method)
            method_label.grid(row=row, column=col * 2, padx=5, pady=2, sticky="w")

            credits_entry = tk.Entry(method_frame, textvariable=self.method_credits[method])
            credits_entry.grid(row=row, column=col * 2 + 1, padx=5, pady=2, sticky="e")

        # Frame for class duration dropdown
        duration_frame = tk.Frame(self.root)
        duration_frame.pack(pady=5)

        # Label for class duration
        duration_label = tk.Label(duration_frame, text="Class Duration:")
        duration_label.grid(row=0, column=0, padx=5)

        # Dropdown for class duration options
        duration_dropdown = ttk.Combobox(duration_frame, textvariable=self.selected_duration, values=self.duration_options)
        duration_dropdown.grid(row=0, column=1, padx=5)

        # Frame for meetings per week dropdown
        meetings_frame = tk.Frame(self.root)
        meetings_frame.pack(pady=5)

        # Label for meetings per week
        meetings_label = tk.Label(meetings_frame, text="Meetings per Week:")
        meetings_label.grid(row=0, column=0, padx=5)

        # Dropdown for meetings per week options
        meetings_dropdown = ttk.Combobox(meetings_frame, textvariable=self.selected_meetings_per_week, values=self.meetings_per_week_options)
        meetings_dropdown.grid(row=0, column=1, padx=5)

        # Entry for user to input the start time
        start_time_label = tk.Label(self.root, text="Start Time HH:MM AM/PM:")
        start_time_label.pack(pady=5)
        self.start_time_entry = tk.Entry(self.root)
        self.start_time_entry.insert(0, "08:00 AM")  # Set a default start time
        self.start_time_entry.pack(pady=5)

        # Frame for buttons
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=10)

        # Button to calculate totals
        calculate_button = tk.Button(button_frame, text="Do it!", command=self.calculate_totals)
        calculate_button.grid(row=0, column=0, padx=5)

        # Button to clear results
        clear_button = tk.Button(button_frame, text="Reset", command=self.check_reset_count)
        clear_button.grid(row=0, column=1, padx=5)

        # Adding Scrollbar and Text widget for results
        scrollbar = tk.Scrollbar(self.root)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Text box for displaying results
        self.results_text = tk.Text(self.root, wrap=tk.WORD, yscrollcommand=scrollbar.set, width=80, height=20)  # Increased width to 80
        self.results_text.pack(pady=5, padx=10)
        scrollbar.config(command=self.results_text.yview)

        # Add footnote at the bottom left corner
        footnote_label = tk.Label(self.root, text="For total daily time, if not in a 5 min block, the time will need to be rounded up to\n the next 5 min block. Break times are included, if any. If the class is between 2-4 hours a 15 minute break is added, \nif between 4-6 hours 2 breaks are added, if over 6 hours 1 hour is added (2 breaks + 1 30 min meal time)\n* for 50-minute clock hour clinical only. ", font=("Helvetica", 10, "italic"))
        footnote_label.place(relx=0, rely=1, anchor="sw")

    def calculate_totals(self):
        self.results_text.delete(1.0, tk.END)  # Clear previous results

        total_direct_instruction_time = 0
        total_out_of_class_student_work = 0
        total_combined_instructional_time = 0

        duration = int(self.selected_duration.get().split()[0])
        meetings_per_week = self.selected_meetings_per_week.get()

        start_time_str = self.start_time_entry.get()

        try:
            start_time = datetime.strptime(start_time_str, "%I:%M %p")
        except ValueError:
            self.results_text.insert(tk.END, "Invalid start time format. Please use HH:MM AM/PM.\n")
            return

        for method, values in self.instructional_methods.items():
            credits = self.method_credits[method].get()

            if credits == 0:  # Skip if credits are zero
                continue

            direct_instruction_time = credits * values[0]
            out_of_class_student_work = credits * values[1]
            combined_instructional_time = direct_instruction_time + out_of_class_student_work

            total_direct_instruction_time += direct_instruction_time
            total_out_of_class_student_work += out_of_class_student_work
            total_combined_instructional_time += combined_instructional_time

            daily_duration = self.calculate_daily_duration(direct_instruction_time, duration, meetings_per_week)

            # Add breaks and meal time based on the class duration
            if 2 <= daily_duration < 4:
                daily_duration += 0.25  # Add 15 minutes for classes between 2 and 4 hours
            elif 2 <= daily_duration < 6:
                daily_duration += 0.5  # Add 2 breaks of 15 minutes each for classes between 2 and 6 hours
            elif daily_duration >= 6:
                daily_duration += 1.0  # Add 2 breaks of 15 minutes each and a 30-minute meal time for classes over 6 hours

            direct_instruction_time_str = f"{direct_instruction_time:.2f} hours ({int(direct_instruction_time * 60)} minutes)"
            out_of_class_student_work_str = f"{out_of_class_student_work:.2f} hours ({int(out_of_class_student_work * 60)} minutes)"
            combined_instructional_time_str = f"{combined_instructional_time:.2f} hours ({int(combined_instructional_time * 60)} minutes)"
            daily_duration_str = f"{daily_duration:.2f} hours ({int(daily_duration * 60)} minutes)"
			#Made by Cristian Morejon
				#chupapimunanio

            method_result_text = f"{method} | Credits: {credits} | " \
                                 f"Direct: {direct_instruction_time_str} | " \
                                 f"Out-of-Class: {out_of_class_student_work_str} | " \
                                 f"Combined: {combined_instructional_time_str} | " \
                                 #f"Daily: {daily_duration_str}"

            self.results_text.insert(tk.END, method_result_text + "\n\n")

        # Only show totals if there's at least one non-zero credit entry
        if total_direct_instruction_time > 0 or total_out_of_class_student_work > 0:
            total_direct_instruction_time_str = f"{total_direct_instruction_time:.2f} hours ({int(total_direct_instruction_time * 60)} minutes)"
            total_out_of_class_student_work_str = f"{total_out_of_class_student_work:.2f} hours ({int(total_out_of_class_student_work * 60)} minutes)"
            total_combined_instructional_time_str = f"{total_combined_instructional_time:.2f} hours ({int(total_combined_instructional_time * 60)} minutes)"
            total_daily_duration = self.calculate_daily_duration(total_direct_instruction_time, duration, meetings_per_week)

            # Add breaks and meal time based on the total daily class duration
            if 2 <= total_daily_duration < 4:
                total_daily_duration += 0.25  # Add 15 minutes for classes between 2 and 4 hours
            elif 2 <= total_daily_duration < 6:
                total_daily_duration += 0.5  # Add 2 breaks of 15 minutes each for classes between 2 and 6 hours
            elif total_daily_duration >= 6:
                total_daily_duration += 1.0  # Add 2 breaks of 15 minutes each and a 30-minute meal time for classes over 6 hours

            total_daily_duration_str = f"{total_daily_duration:.2f} hours ({int(total_daily_duration * 60)} minutes)"

            break_needed = "YES" if total_daily_duration > 2 else "NO"

            overall_result_text = f"\nOverall Totals: | " \
                                  f"Total Credits: {sum(self.method_credits[method].get() for method in self.method_credits)} | " \
                                  f"Direct: {total_direct_instruction_time_str} | " \
                                  f"Out-of-Class: {total_out_of_class_student_work_str} | " \
                                  f"Combined: {total_combined_instructional_time_str} | " \
                                  f"Total Daily Duration: {total_daily_duration_str} | " \
                                  f"Break Needed: {break_needed}"

            self.results_text.insert(tk.END, overall_result_text)

            # Calculate end time based on the total daily class duration
            end_time = start_time + timedelta(hours=total_daily_duration)

            # Format end time as string
            end_time_str = end_time.strftime("%I:%M %p")

            # Display start and end times in the results text box
            start_time_text = f"\nStart Time: {start_time_str}"
            end_time_text = f"End Time: {end_time_str}\n \n \n \n"

            self.results_text.insert(tk.END, start_time_text + "\n")
            self.results_text.insert(tk.END, end_time_text + "\n")

    def clear_results(self):
        self.results_text.delete(1.0, tk.END)
        for method in self.method_credits:
            self.method_credits[method].set(0)

    def check_reset_count(self):
        # Increment the reset button count
        self.reset_button_count += 1

        # Check if the count reaches 50
        if self.reset_button_count >= 50:
            # Reset the count
            self.reset_button_count = 0

            # Show a pop-up message
            messagebox.showinfo("Easter Egg", "Hey! Stop it!")

        # Call the actual clear_results function
        self.clear_results()

    def calculate_daily_duration(self, total_duration, class_duration, meetings_per_week):
        total_duration_per_week = total_duration / meetings_per_week
        return total_duration_per_week / class_duration


if __name__ == "__main__":
    root = tk.Tk()
    app = InstructionalMethodCalculator(root)
    root.mainloop()
